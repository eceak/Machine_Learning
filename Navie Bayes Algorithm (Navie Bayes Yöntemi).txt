#kutuphaneler tanimlandi
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

#veri seti tanimlandi
dataset = pd.read_csv( ‘/hone/ece/Belgeler/isealim.csv')

#bagimli ve bagimsiz degiskenler belirlendi
x = dataset.iloc[:, [2,3]].values
y = dataset.iloc[:, 4].values

#veri seti , test ve egitim verilerine ayrildi
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)

#Bagimsiz degiskenlerden yas ile beklenen maas ayni birimde olmadigi icin feature scaling
#uygulandi
from sklearn.preprocessing import StandardScaler
sc_X= StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(x_test)

#navie bayes yontemi ile egitim serisi olusturuldu
from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(x_train, y_train)

#deneme tahmin edildi
y_pred = classifier.predict(X_test)

#confustion matris olusturuldu
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
cm

#egitim seti icin grafik olusturuldu
from matplotlib.colors import ListedColormap
X_set, y_set = X_train, y_train
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step=0.01)
         np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step=0.01)
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1. shape),
             alpha = 0.75, cmap = ListedColormap(( ‘pink’, ‘purple')))
plt.xlim(X1.min(), X1.max())
plt. ylim(x2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
       plt.scatter(x_set[y_set == j, 0], X_set[y_set == j,1],
                   c = ListedColormap(( ‘orange’, splat 4p label = j)
plt.title( ‘Naive Bayes (Egitim Seti)')
plt.xlabel( ‘Yas ‘)
plt.ylabel( 'Beklenen Maas ')
plt. legend()
plt.show()

#test seti icin grafik olusturuldu
from matplotlib.colors import Listedcolormap
X_set, y_set = X_test, y test
x1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step=0.01)
                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape) ,
             alpha = 0.75, cmap = ListedColormap({ ‘pink’, ‘purple')))
plt.xLim(xi.min(), X1.max())
plt.yLim(x2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
       plt.scatter(X_set[y_set == j, 0], x_setly_ set == j, 1],
                   c = ListedColormap(( ‘orange’, ‘green'))((i), label = j)
plt.title( ‘Naive Bayes (Test Seti)')
plt.xlabel( ‘Yas ")
plt.ylabel( ‘Beklenen Maas‘)
plt.legend()
plt.show()

 
