
#kutuphaneler tanimlandi
import numpy as np
import scipy.stats as st
import sklearn.Linear_model as lm
import matplotlib.pypLlot as plt

#dogrusal olmayan bir fonksiyon tanimlaniyor
def f(x):
return np.exp(3 * x)
x_tr = np.Linspace(0., 2, 200)
y_tr = f(x_tr)

#0 ile 1 arasinda degerler uretildi
x = np.array([0, .1, .2, .5, .8, .9, 1))
y = f(x) + 2 * np.random.randn(len(x))

# 0-1 arasindaki veriler isaretlendi
fig, ax = plt.subplots(1, 1, figsize=(6, 3))
ax.plot(x_tr, y_tr, '--k')
ax.plot(x, y, ‘ok', ms=10)
ax.set_xlim(0, 1.5)
ax.set_ylim(-10, 80)
ax.set_title( 'Uretilen model")

#ridge resgresyonu uygulandi
ridge = lm.RidgeCV()

fig, ax = plt.subplots(1, 1, figsize=(6, 3))
ax.plot(x_tr, y_tr, '--k')

for deg, s in zip([2, 5], ['-', '.']):
    ridge. fit(np.vander(x, deg + 1), y)
    y_ridge = ridge.predict(np.vander(x_tr, deg + 1))
    ax.plot(x_tr, y_ridge, s,
            label='derece " + str(deg))
    ax. legend( loc=2)
    ax.set_xLim(0, 1.5)
    ax.set_ylim(-10, 80)
   #modelin katsayilarini bastirma
 print(f'Coefficients, degree {deg}:',
   ' ' .join(f'{c:.2f}' for c in ridge.coef_))

ax.plot(x, y, ‘ok', ms=10)
ax.set_title( "Ridge regresyonu")

 